{% extends 'layout_simple.njk' %}

{% block title %}16745: Assignment-2{% endblock %}

{% block headmeta %}
    <link rel="stylesheet" href="/css/simple.css">
    <meta name="description" content="Assignment submitted by Jianzhe Gu, Vivek Roy and Yiwei Lyu"/>
    <meta property="og:title" content="16745: Assignment-2"/>
    <meta property="og:url" content="https://vivekroy.com/16745/a2"/>
    <meta property="og:description" content="Assignment submitted by Jianzhe Gu, Vivek Roy and Yiwei Lyu"/>
    <script>MathJax = {tex: {inlineMath: [['$', '$'], ['\\(', '\\)']]}};</script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
{% endblock %}

{% block content %}
  <body>
    <header>
      <h1>16745: Assignment-2</h1>
      <div class="authors">
        <div>
          <h3>Jianzhe Gu</h3>
          <span>jianzheg@andrew.cmu.edu</span>
        </div>
        <div>
          <h3>Vivek Roy</h3>
          <span>vroy@andrew.cmu.edu</span>
        </div>
        <div>
          <h3>Yiwei Lyu</h3>
          <span>yiweilyu@andrew.cmu.edu</span>
        </div>
      </div>
    </header>
    <main>
      <section>
        <p>Python code: <a href="/16745-a2.zip">zip</a></p>
      </section>
      <section>
        <h1>Overview</h1>
        <p>
        In this assignment, our goal was to come up with a policy to control a Ackermann system to drive it through a series of waypoints in the shortest time given a set of constraints on the dynamics as well as the control sequence. In order to realize our goal, we decided to split the problem into two stages &#8212; planning and control.
        </p>
        <p>
        In the planning phase, we are concerned about the location of the waypoints and the heading angle for every waypoint. We need to be concerned about the following constraints &#8212;
          <ol>
            <li>Order and location of waypoints</li>
            <li>Waypoint tolerance</li>
            <li>Waypoint heading</li>
            <li>Waypoint heading tolerance</li>
            <li>Minimum turning radius</li>
            <li>Maximum steering angle</li>
          </ol>
        </p>
        <p>
          So here is the problem that we are trying to solve in this phase - given a sequence of waypoint coordinates, we want the system to go through them in order. We have a tolerance on the location of the vehicle to be considered as reaching that waypoint. In addition to this, we also have a heading associated with each waypoint as well as a heading tolerance. The minimum turning radius and steering angle pose additional constraints on the path of the vehicle. We try to find the shortest path which satisfies the constraints.
        </p>
        <p>
          In the next optimum control phase, we take the planned shortest path and find the optimum control commands for velocity and acceleration in order to traverse the path in the fastest possible way thereby minimizing time. The constraints to be considered in this phase are those of maximum acceleration, deceleration, maximum velocity and centripetal forces to avoid slipping and toppling. We did a velocity profiling to minimize the time for the car to finish the trajectory but making sure it does so without slipping. Since the control is not perfect, if the system deviates from the planned path, we replan the trajectory from the new point forward.
        </p>
      </section>
      <section>
        <h1>Phase 1 - Planning</h1>
        <p>
          In order to solve the global planning problem of reaching every waypoint in order and with an acceptable heading, we solve the local planning problem of reaching one waypoint from the previous one and finally combine the local solutions in order to find a global solution. In other words, we solve the local planning from 1 to 2 first, then planning from 2 to 3 and finally combining them together to get the path from 1 to 3.
        </p>
        <h2>Quintic Polynomials</h2>
        <p>
          The first approach we tried was to fit a minimum-jerk path between the two waypoints being considered in the local planning. This way we get optimum planning and control by optimizing coefficients of one set of equations. We considered polynomial paths and analytical solutions to them in order to solve for the optimum coefficients. We considered a quintic polynomial as proposed in <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=637936" target="blank">[1]</a>. This method ensures that the path planned is smooth and satisfies the constraints of maximum acceleration and velocity.
        </p>
        <p>
          One drawback of this method that we noticed was that it does not consider the radius of curvature constraints and as a result ends up violating the maximum centrifugal force limit and leads to the unrecoverable toppling of the vehicle. Sometimes the vehicle slowly orbits around the waypoint for several rounds before it is able to meet the heading constraints of the waypoint. Our understanding of this is that it has got to do with the maximum allowed steering angle by the physics engine used.
        </p>
        <div style="display: flex; justify-content: center;">
          <video controls>
            <source src="/quintic.mp4" type="video/mp4">
            Your browser does not support video playback
          </video>
        </div>
        <h2>Piecewise Intrinsic Spline</h2>
        <p>
        We choose the piecewise intrinsic spline method proposed in <a href="https://www.ri.cmu.edu/pub_files/pub3/delingette_h_1991_1/delingette_h_1991_1.pdf" target="blank">[2]</a> as the second approach. In the second approach, we formalize the problem into finding the shortest spline that abides by the constraints. Specifically, the spline should meet the following requirements:
        </p>
        <ol>
          <li>The spline should be at least twice differentiable.</li>
          <li>The minimum radius of curvature of the spline should be larger than the minimum turning radius of 0.67m as derived from the maximum steering angle.</li>
          <li>The start point should be the current position, and the tangential direction (the first derivative) of the start point should be in the direction of current velocity.</li>
          <li>The difference between the endpoint and the waypoint coordinates should be within the radius of tolerance, and the difference between the tangential direction of the endpoint and the heading direction of the target waypoint should be within the angle tolerance.</li>
          <li>The spline should not intersect with any of the boundaries.</li>
        </ol>
        <p>
          In order to find the shortest path meeting the above mentioned requirements, we begin with one piece of Cubic Bezier Curve with optimized control points. In order to do that, we start with setting the control points to be in the direction of the heading in the two ends of the path and then optimize the length of the control vectors. We formulate this optimization as the minimization of the maximum radius of curvature of the spline.
        </p>
        <img style="width: 100%; height: 400px; object-fit:contain;" src="/img/spline.png" alt="Spline radius of curvature adjustment">
        <p>
          Once we have the optimal control points, we check if at any point in the spline, the radius of curvature does not meet the hard constraint given in the problem statement. If so, we use the method proposed in <a href="https://www.ri.cmu.edu/pub_files/pub3/delingette_h_1991_1/delingette_h_1991_1.pdf" target="blank">[2]</a> to find the point of maximum curvature and split the spline at that point into two splines. We then move this cut point in the opposite direction of the normal at that point to decrease the radius of curvature at that point.
        </p>
        <p>
          We do this step iteratively until the hard constraint on curvature is met. Formally, we follow the steps as &#8212;
        </p>
        <p>
          Step 1: Create a cubic spline given start and end points $p_0$, $p_1$ and control points $t_0$, $t_1$
        </p>
        <p>
          Step 2: Optimize the magnitude of control vectors changing $t_0$, $t_1$
        </p>
        <p>
          Step 3: Find the point of maximum curvature on the spline. If the curvature is larger than the maximum admissible curvature, we split the curve at this point into two splines. The points are moved outward along the normal of the curve, which is proportional to the curvature. The distance of the movement will be the distance to meet the criteria of maximum curvature at that point.
        </p>
        <p>
          Step 4: For each curve, repeat the step 2~3 until the maximum curvature is within the range. In this way, by moving these points outside the curvature, we create a longer trajectory which decreases the curvature since the amount of turning is spreaded along the curve.
        </p>
        <p>We reparamerized the spline with curve length $s$, thus getting $s$-$x$ profile $x(s)$ and $s$-$v$ profile $v(s)$.</p>
      </section>
      <section>
        <h1>Phase 2 - Control</h1>
        <h2>Step 1: Speed Profiling</h2>
        <img style="width: 100%; height: 400px; object-fit: contain;" src="/img/car_diag.png" alt="car turning acceleration model">
        <p>Given an intrinsic curve $c(s)$ derived in the previous section, we aim to generate control commands which satisfy the dynamic feasibility and given constraints. We get the velocity and acceleration by taking the first and second derivatives of the planned path.</p>
        <p>
          We compute the largest centripetal acceleration using a simplified model of the car based on the height and width of the chassis, based on the relationship between centripetal acceleration, radius and velocity &#8212;
        $$ v(s) \leq \sqrt{\dfrac{g.w.R(s)}{l}} $$
        $$ R(s) = \dfrac{1}{k(s)} = \dfrac{1}{\sqrt{x''(s)^2 + y''(s)^2}} $$
        $$ v(s) \leq \sqrt{ \dfrac{g.w}{l.\sqrt{x''(s)^2 + y''(s)^2}} } $$
        </p>
        <p>
        We can calculate the radius of curvature at any given $s$. As a result, we can also compute the maximum velocity at that $s$ on the trajectory. We will have $s \implies curvature (R)$, then get $s, R \implies V_{max}$. We integrate the velocity from $t = 0$, $v = V_0$, thus getting the mapping $t \implies s$.
        </p>
        <img style="width: 100%; height: 400px; object-fit: contain;" src="/img/velocity.png" alt="">
        <p>Thus we have an $s$ - $V_{max}$ profile shown above. For example, for a given trajectory in fig (a), we will have the $s$ - $V_{max}$ profile as fig (b). The goal for speed profiling is to get a trajectory in $s$ - $V$ profile (blue trajectory in fig (b)) that meets the following constraints:</p>
        <ol>
          <li>Velocity constraint: For any $s$, $v(s) \leq V_{max}(s)$</li>
          <li>Initial velocity $V_0$ equals to current velocity, as well as the velocity at the next waypoint (we set this to a small value $v_{way} = 1$)</li>
          <li>$a(s) \leq a_{max}$, specifically, in $s$-$V_{max}$ profile, $a = \frac{dv}{ds} . v \leq a_{max}$.</li>
        </ol>
        <p>The goal for the optimization is to maximize the accumulated velocity, $$\int_{s_0}^{s_{end}} v(s).ds$$</p>
        <p>We compute $s$-$t$ profile with $$t(s) = \int_{s_0}^{S}\dfrac{dS}{v(s)}$$ We get $t$-$s$ profile $s(t)$ by fitting the data from $t(s)$.</p>
        <p>By connecting $s$-$v$ profile and $t$-$s$ profile we get $v(t) = V(s(t))$</p>
        <p>By connecting the $s$-$x$ and $s$-$y$ profile we get from part 1 with $t$-$s$ profile, we get $x(t)$ and $y(t)$
        <h2>Step 2: Convert trajectory to control commands</h2>
        <p>After getting $v(t)$, we are able to compute the velocity $v$ and steering angle $\phi$ at any time $t$ with the following equations:</p>
        $$ v(t) = \sqrt{x'(t)^2 + y'(t)^2} $$
        $$ \theta(t) = \dfrac{y'(t)}{x'(t)} $$
        $$ \phi(t) = \tan^{-1} \left( \dfrac{L}{v(t)}.\theta'(t) \right) $$
        <p>We constantly check the deviation of the car from the predicted position and dynamically replan the trajectory once</p>
        <ol>
          <li>the deviation is larger than a threshold,</li>
          <li>the car reaches the goal area within the goal yaw angle range, or</li>
          <li>time $t$ exceeds the planned ending time.</li>
        </ol>
      </section>
      <section>
        <h1>Result</h1>
        <p>Average time</p>
        <p>Computing time for each optimization</p>
      </section>
      <section>
        <h1>Discussion</h1>
        <p>Instead of computing the trajectory between every two waypoints,  one possible improvement is to do global optimization from the first point to the last point, and take the position tolerance and yaw angle tolerance of middle waypoints as inequality constraints. In such a case, the optimizer can explore the waypoints that lead to the shortest path but still within the tolerance range.</p>
      </section>
    </main>
  </body>
{% endblock %}
