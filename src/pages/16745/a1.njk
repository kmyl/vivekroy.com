{% extends 'layout_simple.njk' %}

{% block title %}16745: Assignment-1{% endblock %}

{% block headmeta %}
    <link rel="stylesheet" href="/css/simple.css">
    <meta name="description" content="Assignment submitted by Jianzhe Gu, Yiwei Lyu and Vivek Roy"/>
    <meta property="og:title" content="16745: Assignment-1"/>
    <meta property="og:url" content="https://vivekroy.com/16745/a1"/>
    <meta property="og:description" content="Assignment submitted by Jianzhe Gu, Yiwei Lyu and Vivek Roy"/>
    <script>MathJax = {tex: {inlineMath: [['$', '$'], ['\\(', '\\)']]}};</script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
{% endblock %}

{% block content %}
  <body>
    <header>
      <h1>16745: Assignment-1</h1>
      <div class="authors">
        <div>
          <h3>Jianzhe Gu</h3>
          <span>jianzheg@andrew.cmu.edu</span>
        </div>
        <div>
          <h3>Yiwei Lyu</h3>
          <span>yiweilyu@andrew.cmu.edu</span>
        </div>
        <div>
          <h3>Vivek Roy</h3>
          <span>vroy@andrew.cmu.edu</span>
        </div>
      </div>
    </header>
    <main>
      <section>
        <p>Matlab code: <a href="/16745-a1.zip">zip</a></p>
      </section>
      <section>
        <h1>Overview</h1>
        <p>
        We made a snake robot with $n$ links of customizable lengths and a target point and quaternion. This implies that we have $n$ joints (the joint at the origin and $n-1$ joints between consecutive segments). We have limits on the minimum and maximum values of roll, pitch and yaw corresponding to every joint. In optimization, we first did forward kinematics to get the positions and Euler angles of each joint, then try to minimize the Euclidean distance of both the position and quaternion between the end effector and the target. At the same time, we tried to keep the Euler angles away from the lower bounds and upper bounds. Furthermore, according to different optimization methods, we either used soft constraints or hard constraints to make sure that there is no collision between the links and the obstacles, and Euler angles of joints are always within the range. We thus frame the problem using the following objective function &#8212;

        $$ f_{obj} =
        \begin{cases}
        \omega_1 . \delta_{p} + \omega_2 . \delta_{a} + \omega_3 . \delta_{j} + \omega_4 . \delta_{o} &amp; \text{if &#8216;trust-region-reflective&#8217;} \\
        \omega_1 . \delta_{p} + \omega_2 . \delta_{a} + \omega_3 . \delta_{j} + \omega_4 . \delta_{o^{&#8217;}} &amp; \text{if &#8216;CMA-ES&#8217;} \\
        \omega_1 . \delta_{p} + \omega_2 . \delta_{a} + \omega_3 . \delta_{j} &amp; \text{otherwise}
        \end{cases}$$
        where $\omega_1$, $\omega_2$, $\omega_3$ and $\omega_4$ are the different weights assigned to each objective component signalling the importance of each component towards the final goal. The different $\delta$s are explained below. If the mode is not trust-region-reflective, we use $\delta_o$ as a hard constraint, which is equivalent to setting the value of $\omega_4$ to a very large value. For CMA-ES, in a similar fashion, we use a hard constraint for the obstacles but to make it differentiable we use a different formulation denoted by $\delta_{o^{&#8217;}}$
        </p>
        <ol>
          <li>
            <p>
            <strong>Position deviation </strong>($\delta_{p}$): This terms represents the distance/deviation of the tip of the snake (end of last link) from the target point.
            $$ \delta_{p} = ||\mathbb P_{target} - \mathbb P_{tip}||_2 $$
            </p>
          </li>
          <li>
            <p>
            <strong>Angle deviation </strong>($\delta_{a}$): This term represents the angle deviation of the quaternion of the end of last link and the target quaternion.
            $$ \delta_{a} = ||\mathbb H_{target} - \mathbb H_{tip}||_2 $$
            </p>
          </li>
          <li>
            <p>
            <strong>Joint deviation </strong>($\delta_{j}$): At each joint we calculate the joint loss at that point as the sum of reciprocals of the deviation of relevant angles at that joint from the upper and lower bound of those angles at that joint.
            $$ l_i = \frac{1}{(\theta_i - \theta_i^{lower})^2} + \frac{1}{(\theta_i - \theta_i^{upper})^2}$$
            Where $l_i$ is the deviation at joint $i$, $\theta_i$ represents the relevant angles at that moment in the optimization procedure and $\theta_i^{lower}$, $\theta_i^{upper}$ represent the lower and upper bound on the angles defined by the problem respectively.
            $$ \delta_{j} = \sum_i l_i $$
            The total joint deviation is the sum of joint loss at every joint $i$.
            </p>
          </li>
          <li>
            <p>
            <strong>Continuous non-differentiable obstacle penalty </strong>($\delta_{o}$): For each obstacle $o_j$ with radius $R_j$ and link $l_i$, we calculate a penalty $p_{i,j}$ by the following steps &#8212;
            <div class="svg">
              <img src="/img/16745_a1_diag.png" alt="Obstacles diagram">
            </div>
            <ol type="a">
              <li>
                We calculate $t$ to check on which side of the sphere the line segment is on.
                $$ t_{i,j} = \frac{\vec{J_1O} . \vec{J_1J_2}}{|\vec{J_1J_2}|^2}$$
              </li>
              <li>
                We find the shortest distance between the center of the sphere and the line segment as
                $$ d_{i,j} =
                \begin{cases}
                |\vec{J_1O}| &amp; \text{if } t_{i,j} \lt 0 \\
                |\vec{J_2O}| &amp; \text{if } t_{i,j} \gt 1 \\
                ||t_{i,j}.\vec{J_1J_2} + \vec{J_1} - \vec{O}||_2 &amp; \text{otherwise}
                \end{cases}
                $$
              </li>
              <li>
                From $d_{i,j}$ we get the value of $p_{i,j}$ by comparing $d_{i,j}$ to the radius ($r_j$) of obstacle $o_j$
                $$ p_{i,j} =
                \begin{cases}
                10^5 &amp; \text{if } d_{i,j} \lt r_j \\
                0 &amp; \text{otherwise}
                \end{cases}
                $$
              </li>
            </ol>
            The value of $\delta_o$ can now be calculated as the sum of penalties over all links and all obstacles &#8212;
            $$ \delta_o = \sum_i \sum_j p_{i,j} $$
            </p>
          </li>
          <li>
            <strong>Discrete differentiable obstacle penalty</strong> ($\delta_{o^{&#8217;}}$):
            <p>
            To make the obstacle constraint differentiable, we split the links into small segments and calculate the Euclidean distance between each segment and centres of every obstacle. We use a $sign$ function so that the optimizer does not penalize and push the links away even when the links are very close to the obstacles but not overlapping with any of them.
            Thus, the total penalty can be given by the sum over all small segment $s_i$ for every obstacle $o_j$ with radius $r_j$
            $$ \delta_o = \sum_i \sum_j sign(r_j - || s_i - o_j ||_2) $$
            </p>
          </li>
        </ol>
      </section>
      <section>
        <h1>Part 1</h1>
        <p>Results of part 1 can be seen in the <a href="#figure-part1">figure below</a>. The black segments represent the links. Green balls are the obstacles with specific radii. A small black ball indicates the target position and the green line connected to the target shows the target quaternion angle. The links are expected to reach the target ball from the green line direction without touching any green balls and keep away from minimum and maximum joint angles.</p>
        <div id="figure-part1" style="display: flex; justify-content: space-around; align-items: stretch; flex-wrap: wrap;">
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/3-part1.gif" alt="" style="width: 100%">
            <span>3-links, Numerical</span>
          </div>
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/3-part2.gif" alt="" style="width: 100%">
            <span>3-links, Analytical</span>
          </div>
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/5-part1.gif" alt="" style="width: 100%">
            <span>5-links, Numerical</span>
          </div>
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/5-link-part2.gif" alt="" style="width: 100%">
            <span>5-links, Analytical</span>
          </div>
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/7-part1.gif" alt="" style="width: 100%">
            <span>7-links, Numerical</span>
          </div>
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/7-part2.gif" alt="" style="width: 100%">
            <span>7-links, Analytical</span>
          </div>
        </div>
      </section>
      <section>
        <h1>Part 2</h1>
        <p>In this part we pre-calculate the gradient as input for &#8216;<em>fmincon</em>&#8217;. We first compute the symbolic expression of the loss. Then we take gradient of this loss with respect to Euler angles of all joints using Matlab&#8217;s built-in function &#8216;<em>gradient</em>&#8217;. After that, we use the built-in &#8216;</em>matlabFunction()</em>&#8217; to convert the symbolic expression to a Matlab function. It took 88s to finish the conversion for a 3-link system, but the optimization ran much faster than part 1 and required fewer iterations. However, when the number of links goes over 3, the conversion takes a very long time (&gt;15mins), so we directly use the symbolic expression of gradient for &#8216;<em>fmincon</em>&#8217; through substitution command &#8216;<em>subs</em>&#8217;. To speed up the substitution, we include &#8216;<em>digits(5)</em>&#8217; and &#8216;<em>vpa</em>()&#8217; to reduce precision. As a result, in the <a href="#table-part2">table below</a>, although computing gradient takes more time, optimizing with gradient requires fewer iterations and function evaluations.</p>
        <table style="min-width:700px" id="table-part2">
          <thead>
            <tr>
              <th># of Joints</th>
              <th># of Iterations (without gradient)</th>
              <th># of Objective Function Evaluation (without gradient)</th>
              <th># of Iterations (with gradient)</th>
              <th># of Objective Function Evaluation (with gradient)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>3</td>
              <td>88</td>
              <td>901</td>
              <td>11</td>
              <td>159</td>
            </tr>
            <tr>
              <td>5</td>
              <td>92</td>
              <td>1507</td>
              <td>85</td>
              <td>1493</td>
            </tr>
            <tr>
              <td>7</td>
              <td>94</td>
              <td>2108</td>
              <td>91</td>
              <td>1887</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section>
        <h1>Part 3</h1>
        <p>In part 3, we tried to use and compare different built-in optimization methods including &#8216;interior-point&#8217;, &#8216;sqp&#8217;, &#8216;active-set&#8217; and &#8216;trust-region-reflective&#8217;, as well as &#8216;CMA-ES&#8217; from <a href="https://www.mathworks.com/matlabcentral/fileexchange/52898-cma-es-in-matlab">here</a>.</p>
        <p>For &#8216;interior-point&#8217;, &#8216;sqp&#8217; and &#8216;active-set&#8217;, we kept using the configurations in part 1 and change the algorithm option in &#8216;optimoptions&#8217;. For &#8216;trust-region-reflective&#8217; method, we use the gradient calculating method in part 2. For both &#8216;trust-region-reflective&#8217; and &#8216;CMA-ES&#8217;, hard constraints are not allowed, so we used soft constraints for these two methods. Since “CMA-ES” is derivative-free, we use the continuous non-differentiable way to describe the distance to the obstacle. For “trust-region-reflective”, we split the links into discrete elements and used “sign” function to calculate the soft penalty. The details of objective functions are shown in the overview section.</p>
        <p>In experiments (<a href="table-part3">table</a>), all the algorithms did not break the constraints. Based on our observation, &#8216;trust-region-reflective&#8217; requires fewest iterations and gives the best result, but it needs precomputed gradient. &#8216;sqp&#8217; and &#8216;active-set&#8217; have similar performance and require fewer iterations and function evaluations than &#8216;Interior-point&#8217;. &#8216;Interior-point&#8217; requires most iterations and sometimes cannot converge. &#8216;CMA-ES&#8217; is giving constant results regardless of the initial point, but the quality of the result is worse than the others (<a href="figure-part3">figure</a>). The position and the quaternion of the end effector always have a small but obvious deviation from the target.</p>
        <table style="min-width:700px" id="table-part3">
          <thead>
            <tr>
              <th></th>
              <th>interior-point</th>
              <th>sqp</th>
              <th>active-set</th>
              <th>trust-region-reflective</th>
              <th>CMA-ES</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td># of iteration</td>
              <td>180</td>
              <td>91</td>
              <td>92</td>
              <td>65</td>
              <td>1300</td>
            </tr>
            <tr>
              <td># of evals</td>
              <td>2980</td>
              <td>1502</td>
              <td>1515</td>
              <td>-</td>
              <td>-</td>
            </tr>
            <tr>
              <td>Fval</td>
              <td>5.42e<sup>-3</sup></td>
              <td>6.16e<sup>-3</sup></td>
              <td>6.90e<sup>-3</sup></td>
              <td>5.33e<sup>-3</sup></td>
              <td>1.28e<sup>-2</sup></td>
            </tr>
          </tbody>
        </table>
        <div id="figure-part3" style="display: flex; justify-content: space-around; align-items: stretch; flex-wrap: wrap;">
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/interior-point.gif" alt="" style="width: 100%">
            <span>interior-point</span>
          </div>
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/sqp.gif" alt="" style="width: 100%">
            <span>sqp</span>
          </div>
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/active_set.gif" alt="" style="width: 100%">
            <span>active-set</span>
          </div>
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/trust-region-reflective.gif" alt="" style="width: 100%">
            <span>trust-region-reflective</span>
          </div>
          <div style="flex-basis: 300px; margin: 1em;">
            <img src="/img/cmaes.gif" alt="" style="width: 100%">
            <span>CMA-ES</span>
          </div>
        </div>
      </section>
      <section>
        <h1>Part 4</h1>
        <p>In part 4, we use &#8216;sqp&#8217; and &#8216;active-set&#8217; to randomly sampled a certain number (by default 15) of initial Euler angles between lower bounds and upper bounds. After collecting 15 solutions, we computed the Euclidean distance between them and pick the 4 solutions with the largest average distance between each other. As <a href="#figure-part4">figure below</a> shows, a 5-link system can reach the target without touching constraints in visually different ways.</p>
        <div id="figure-part4" style="display: flex; justify-content: space-around; align-items: stretch; flex-wrap: wrap;">
          <div style="flex-basis: 250px; margin: 1em;">
            <img src="/img/part4-sqp-1.gif" alt="" style="width: 100%">
            <span>Initialization 1</span>
          </div>
          <div style="flex-basis: 250px; margin: 1em;">
            <img src="/img/part4-sqp-2.gif" alt="" style="width: 100%">
            <span>Initialization 2</span>
          </div>
          <div style="flex-basis: 250px; margin: 1em;">
            <img src="/img/part4-sqp-3.gif" alt="" style="width: 100%">
            <span>Initialization 3</span>
          </div>
          <div style="flex-basis: 250px; margin: 1em;">
            <img src="/img/part4-sqp-4.gif" alt="" style="width: 100%">
            <span>Initialization 4</span>
          </div>
        </div>
      </section>
      <section>
        <h1>Discussion</h1>
        <p>We observe that the automatic ‘gradient’ function usually complicates the gradient. On the contrary, manually writing gradient would be more efficient for converting the expression to MatlabFunction. Therefore, our future work of part 2 is to manually write the gradient for link position, link angle, and obstacles. In that way, optimization would be faster and more efficient.</p>
        <p>In part 2, we saw that methods with gradient require fewer iterations and have better convergence. However, the cost of the gradient is the pre-computing time or the effort of manually computing for the gradient. We need to consider the trade-off between the pre-computing time and the number of iterations.</p>
        <p>CMA-ES is iterated based on population and updating the distribution. It is less likely to be trapped in local minima and always having consistent results. But it is also hard to find a global minimum with high precision. In the future, we can try to use CMA-ES to generate an initial guess, and then use other methods to improve the result on top of CMA-ES. On the other hand, methods that are not based on population have a higher chance to be trapped in local minima. Therefore, it would be effective to pick a best solution from multiple solutions with different initial points.</p>
        <p>To increase the generality of the problem, we recommend using soft constraints with differentiability. This enables more optimization methods including both derivative-based and derivative-free methods, and methods cannot satisfy hard constraints. However, hard constraint usually provides a sharper boundary for the solution, while soft constraint might push the solution away from the constraints even when the constraints are not violated, which causes a sacrificing of the potential solutions.</p>
      </section>
    </main>
  </body>
{% endblock %}
