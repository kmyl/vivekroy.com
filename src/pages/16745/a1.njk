{% extends 'layout_simple.njk' %}

{% block title %}16745: Assignment-1{% endblock %}

{% block headmeta %}
    <link rel="stylesheet" href="/css/simple.css">
    <meta name="description" content="Assignment submitted by Jianzhe Gu, Yiwei Lyu and Vivek Roy"/>
    <meta property="og:title" content="16745: Assignment-1"/>
    <meta property="og:url" content="https://vivekroy.com/16745/a1"/>
    <meta property="og:description" content="Assignment submitted by Jianzhe Gu, Yiwei Lyu and Vivek Roy"/>
    <script>MathJax = {tex: {inlineMath: [['$', '$'], ['\\(', '\\)']]}};</script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
{% endblock %}

{% block content %}
  <body>
    <header>
      <h1>16745: Assignment-1</h1>
      <div class="authors">
        <div>
          <h3>Jianzhe Gu</h3>
          <span>jianzheg@andrew.cmu.edu</span>
        </div>
        <div>
          <h3>Yiwei Lyu</h3>
          <span>yiweilyu@andrew.cmu.edu</span>
        </div>
        <div>
          <h3>Vivek Roy</h3>
          <span>vroy@andrew.cmu.edu</span>
        </div>
      </div>
    </header>
    <main>
      <section>
        <p>Matlab code: <a href="/16745-a1.zip">zip</a></p>
      </section>
      <section>
        <h1>Overview</h1>
        <p>
        We made a snake robot with 3 links of customizable lengths and a target point and quaternion. This implies that we have 3 joints (the joint at the origin and the two joints between consecutive segments). We have limits on the minimum and maximum values of roll, pitch and yaw corresponding to every joint. The optimization is to use forward kinematics and reduce the Eucledian distance between the target quaternion and the tip (end of last link). We also consider obstacles in the 3D space which we want to avoid as well as stay away from the obstacles as much as possible. We thus frame the problem using the following objective function &#8212;
        $$ f_{obj} =
        \begin{cases}
        \omega_1 . \delta_{p} + \omega_2 . \delta_{a} + \omega_3 . \delta_{j} + \omega_4 . \delta_{o} &amp; \text{if &#8216;trust-region-reflective'} \\
        \omega_1 . \delta_{p} + \omega_2 . \delta_{a} + \omega_3 . \delta_{j} &amp; \text{otherwise}
        \end{cases}$$
        where $\omega_1$, $\omega_2$, $\omega_3$ and $\omega_4$ are the different weights assigned to each objective component signalling the importance of each component towards the final goal. The different $\Delta$s are explained below. If the mode is not trust-region-reflective, we use $\delta_o$ as a hard constraint, i.e. $\omega_4$ is a very large value.
        </p>
        <ol>
          <li>
            <p>
            <strong>Position deviation </strong>($\delta_{p}$): This terms represents the distance/deviation of the tip of the snake (end of last link) from the target point.
            $$ \delta_{p} = ||\mathbb P_{target} - \mathbb P_{tip}||_2 $$
            </p>
          </li>
          <li>
            <p>
            <strong>Angle deviation </strong>($\delta_{a}$): This term represents the angle deviation of the quaternion of the end of last link and the target quaternion.
            $$ \delta_{a} = ||\mathbb H_{target} - \mathbb H_{tip}||_2 $$
            </p>
          </li>
          <li>
            <p>
            <strong>Joint deviation </strong>($\delta_{j}$): At each joint we calculate the joint loss at that point as the sum of reciprocals of the deviation of relevant angles at that joint from the upper and lower bound of those angles at that joint.
            $$ l_i = \frac{1}{(\theta_i - \theta_i^{lower})^2} + \frac{1}{(\theta_i - \theta_i^{upper})^2}$$
            Where $l_i$ is the deviation at joint $i$, $\theta_i$ represents the relevant angles at that moment in the optimization procedure and $\theta_i^{lower}$, $\theta_i^{upper}$ represent the lower and upper bound on the angles defined by the problem respectively.
            $$ \delta_{j} = \sum_i l_i $$
            The total joint deviation is the sum of joint loss at every joint $i$.
            </p>
          </li>
          <li>
            <p>
            <strong>Obstacle penalty </strong>($\delta_{o}$): For each obstacle $o_j$ with radius $R_j$ and link $l_i$, we calculate a penalty $p_{i,j}$ by the following steps &#8212;
            <div class="svg">
              <img src="/img/16745_a1_diag.png" alt="Obstacles diagram">
            </div>
            <ol type="a">
              <li>
                We calculate $t$ to check on which side of the sphere the line segment is on.
                $$ t_{i,j} = \frac{\vec{J_1O} . \vec{J_1J_2}}{|\vec{J_1J_2}|^2}$$
              </li>
              <li>
                We find the shortest distance between the center of the sphere and the line segment as
                $$ d_{i,j} =
                \begin{cases}
                |\vec{J_1O}| &amp; \text{if } t_{i,j} \lt 0 \\
                |\vec{J_2O}| &amp; \text{if } t_{i,j} \gt 1 \\
                ||t_{i,j}.\vec{J_1J_2} + \vec{J_1} - \vec{O}||_2 &amp; \text{otherwise}
                \end{cases}
                $$
              </li>
              <li>
                From d we get the value of $p_{i,j}$
                $$ p_{i,j} =
                \begin{cases}
                10^5 &amp; \text{if } d_{i,j} \lt R_j \\
                0 &amp; \text{otherwise}
                \end{cases}
                $$
              </li>
            </ol>
            The value of $\delta_o$ can now be calculated as the sum of penalties over all links and all obstacles &#8212;
            $$ \delta_o = \sum_i \sum_j p_{i,j} $$
            </p>
          </li>
        </ol>
      </section>
      <section>
        <h1>Part 2</h1>
        <p>In this part we pre-ialculate the gradient as input for &#8216;<em>fmincon</em>&#8217;. We first compute the symbolic expression of the loss. Then we take gradient of this loss with respect to Euler angles of all joints using Matlab&#8217;s built-in function &#8216;<em>gradient</em>&#8217;. After that, we use the built-in &#8216;</em>matlabFunction()</em>&#8217; to convert the symbolic expression to a Matlab function. It took 88s to finish the conversion for a 3-link system, but the optimization ran much faster than part 1 and required fewer iterations. However, when the number of links goes over 3, the conversion takes a very long time (&gt;15mins), so we directly use the symbolic expression of gradient for &#8216;<em>fmincon</em>&#8217; through substitution command &#8216;<em>subs</em>&#8217;. To speed up the substitution, we include &#8216;<em>digits(5)</em>&#8217; and &#8216;<em>vpa</em>()&#8217; to reduce precision. As a result, in the <a href="#table-part2">table below</a>, although computing gradient takes more time, optimizing with gradient requires fewer iterations and function evaluations.</p>
        <table style="min-width:700px" id="table-part2">
          <thead>
            <tr>
              <th># of Joints</th>
              <th># of Iterations (without gradient)</th>
              <th># of Objective Function Evaluation (without gradient)</th>
              <th># of Iterations (with gradient)</th>
              <th># of Objective Function Evaluation (with gradient)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>3</td>
              <td>88</td>
              <td>901</td>
              <td>11</td>
              <td>159</td>
            </tr>
            <tr>
              <td>5</td>
              <td>92</td>
              <td>1507</td>
              <td>85</td>
              <td>1493</td>
            </tr>
            <tr>
              <td>7</td>
              <td>94</td>
              <td>2108</td>
              <td>91</td>
              <td>1887</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section>
        <p>We observe that the automatic &#8216;<em>gradient</em>&#8217; function sometimes complicates the gradient. Therefore, the future work of part 2 is to manually write the gradient for link position, link angle and obstacles. In that way, it would be faster to convert the symbolic expression into &#8216;<em>matlabFunction</em>&#8217; and optimization would be efficient.</p>
      </section>
    </main>
  </body>
{% endblock %}
